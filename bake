#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;

sub rmcom {
	$_ = shift;
	s/\s+#.*$//;
	return $_;
}

#TODO: multiline...
#TODO: incude
#sub init {
#}

my $fh;
my @arg = @ARGV;

my $bkfile_dot = "$ENV{HOME}/.bakefile";
my $bkfile_cur = "Bakefile";

my $def_cmd;
my $def_cmd_def;
my $def_cmd_norm;

my %env_list = %ENV;
my %env_list_def;
my %env_list_norm;

my %cmd_list;
my %cmd_list_def;
my %cmd_list_norm;

my %read_list;
#my @incl_list;

#my $w = "[a-zA-Z0-9_.]";
my $w = qr/[a-zA-Z0-9_]/;

my $env_pat;
$env_pat = qr/
	\$\{
		(\#?$w+)
		(:
			(?:
				(??{ $env_pat })
				|
				[^}]*
			)
		)?
	\}
/x;
my $env_pat_num;			#TODO: fix duplication
$env_pat_num = qr/
	\$\{
		([0-9]+)
		(:
			(?:
				(??{ $env_pat })
				|
				[^}]*
			)
		)?
	\}
/x;


sub read_bake {
	my $file = shift;
	open my $fh, '<', $file or return;

	my $line = 1;
	while (<$fh>) {
		chomp;
		next if /^$/ or /^\s*#/;

		my ($cmd_list_ref, $env_list_ref, $def_cmd_ref);
		if ($file eq $bkfile_cur) {
			$cmd_list_ref = \%cmd_list_def;
			$env_list_ref = \%env_list_def;
			$def_cmd_ref = \$def_cmd_def;
		} else {
			$cmd_list_ref = \%cmd_list_norm;
			$env_list_ref = \%env_list_norm;
			$def_cmd_ref = \$def_cmd_norm;
		}

		if (/^\s*([^:]+)\s*:\s*(.*)\s*$/) {
			$$def_cmd_ref = $1 unless %$cmd_list_ref;
			$$cmd_list_ref{$1} = rmcom($2);
		} elsif (/^\s*($w+)\s*=\s*(.*)\s*$/) {
			$$env_list_ref{$1} = rmcom($2);
			#} elsif (/^include\s*(.*)/) {
			#	push @inc_list, rmcom($1);
		} else {
			die "<$_>\nSyntax error at $file, line $line\n";
		}
	}
	close $fh or die "close failed\n";
	$read_list{$file}++;
	$line++;
}

read_bake($bkfile_dot);
read_bake($bkfile_cur);

%read_list or die "No Bakefile available\n";

$def_cmd = $def_cmd_def || $def_cmd_norm || "";
$def_cmd or die "No command in Bakefile\n";

for (\%cmd_list_norm, \%cmd_list_def) {
	while (my($l, $r) = each %$_) {
		$cmd_list{$l} = $r;
	}
}
for (\%env_list_norm, \%env_list_def) {
	while (my($l, $r) = each %$_) {
		$env_list{$l} = $r;
	}
}


my $lv = shift @arg;
$lv ||= $def_cmd;
$lv = $def_cmd if $lv eq "-";

my $i = 1;
$env_list{$i++} = $_ for @arg;

my $rv;
($rv = $cmd_list{$lv}) or die "$lv: command not defined\n";




#TODO: @{} + ${} <- whole routine iterate <- Completed??
#TODO: arg @{asdf}{first, second, ...} <- Completed?
while ($rv =~ /\@\{($w+)\}(?:\{((?:(?:$env_pat|[^,]*)\s*,?)+)\})?/pg) {
	my %env_tmp;
	my $rv_1st = $1;
	my $rv_2nd = $2;
	my ($sav, $res) = (${^MATCH}, ${^MATCH});
	$sav =~ s/([\$\{\}])/\\$1/g;

	$cmd_list{$rv_1st} or die "$rv_1st: command not defined\n";
	$res =~ s/$sav/$cmd_list{$rv_1st}; /;

	my @arg_cmd;
	if ($rv_2nd and $rv_2nd =~ /\s*,\s*/) {
		@arg_cmd = split /\s*,\s*/, $rv_2nd;
		my $i = 1;
		$env_tmp{$i++} = $_ for @arg_cmd;
	}

	#print "DEBUGGING\n";
	while ($res =~ /$env_pat_num/pg) {
		(my $rep = $env_tmp{$1} || $2) or die "$rv_1st: Need more arg(s)#1\n";
		(my $sev = ${^MATCH}) =~ s/([\$\{\}])/\\$1/g;
		$rep =~ s/^://;
		$res =~ s/$sev/$rep/;
	}

	$rv =~ s/$sav/$res/;
}


#TODO: fzf
#TODO: Nested env: ${1:${HOME}} -> Completed???
#TODO: More Options... ${${asdf}?" * ":asdf_default}


while ($rv =~ /$env_pat/pg) {
	my ($sav, $one, $two) = (${^MATCH}, $1, $2);
	$one =~ s/^#//;
	$sav =~ s/([\$\{\}])/\\$1/g;

	(my $rep = $env_list{$one} || $two) or die "$lv: Need more arg(s)#2\n";
	$rep =~ s/^://;
	$rv =~ s/$sav/$rep/;
}

exec $rv;
